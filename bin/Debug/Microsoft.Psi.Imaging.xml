<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Psi.Imaging</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Psi.Imaging.Image">
            <summary>
            The #Image class represents wrapper of an image in unmanaged memory. Using this class
            it is possible as to allocate new image in unmanaged memory, as to just wrap provided
            pointer to unmanaged memory, where an image is stored.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.Image"/> class.
            </summary>
            <param name="imageData">Pointer to image data in unmanaged memory.</param>
            <param name="width">Image width in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="stride">Image stride (line size in bytes).</param>
            <param name="pixelFormat">Image pixel format.</param>
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.#ctor(Microsoft.Psi.Common.UnmanagedBuffer,System.Int32,System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.Image"/> class.
            </summary>
            <param name="image">The unmanaged array containing the image.</param>
            <param name="width">Image width in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="stride">Image stride (line size in bytes).</param>
            <param name="pixelFormat">Image pixel format.</param>
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.#ctor(System.Int32,System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.Image"/> class.
            </summary>
            <param name="width">Image width in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="stride">Image stride (line size in bytes).</param>
            <param name="pixelFormat">Image pixel format.</param>
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.#ctor(System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.Image"/> class.
            </summary>
            <param name="width">Width of image in pixels</param>
            <param name="height">Height of image in pixels</param>
            <param name="pixelFormat">Pixel format</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.#ctor(System.Drawing.Imaging.BitmapData)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.Image"/> class.
            </summary>
            <param name="bitmapData">Locked bitmap data.</param>
            <remarks><note>Unlike <see cref="M:Microsoft.Psi.Imaging.Image.FromManagedImage(System.Drawing.Imaging.BitmapData)"/> method, this constructor does not make
            copy of managed image. This means that managed image must stay locked for the time of using the instance
            of unamanged image.</note></remarks>
        </member>
        <member name="T:Microsoft.Psi.Imaging.Image.IImageCompressor">
            <summary>
            Interface implemented by the system specific assembly.
            For instance, Microsoft.Psi.Imaging.Windows will define
            an ImageCompressor that implements this interfaces
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.IImageCompressor.Initialize(Microsoft.Psi.Imaging.Image.CustomSerializer.CompressionMethod)">
            <summary>
            Initialize compressor.
            </summary>
            <param name="compressionMethod">Compression method</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.IImageCompressor.Serialize(Microsoft.Psi.Common.BufferWriter,Microsoft.Psi.Imaging.Image,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Serialize compressor.
            </summary>
            <param name="writer">Writer to which to serialize</param>
            <param name="instance">Image instance to serialize</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.IImageCompressor.Deserialize(Microsoft.Psi.Common.BufferReader,Microsoft.Psi.Imaging.Image@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Deserialize compressor.
            </summary>
            <param name="reader">Reader from which to deserialize</param>
            <param name="target">Target image to which to deserialize</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="P:Microsoft.Psi.Imaging.Image.ImageData">
            <summary>
            Gets a pointer to image data in unmanaged memory.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.Image.Width">
            <summary>
            Gets image width in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.Image.Height">
            <summary>
            Gets image height in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.Image.Stride">
            <summary>
            Gets image stride (line size in bytes).
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.Image.Size">
            <summary>
            Gets the size of the image in bytes (stride times height)
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.Image.BitsPerPixel">
            <summary>
            Gets the bits per pixel in the image
            </summary>
        </member>
        <member name="P:Microsoft.Psi.Imaging.Image.PixelFormat">
            <summary>
            Gets image pixel format.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.Create(System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Allocate new image in unmanaged memory.
            </summary>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="pixelFormat">Image pixel format.</param>
            <returns>Return image allocated in unmanaged memory.</returns>
            <remarks><para>Allocate new image with specified attributes in unmanaged memory.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.FromManagedImage(System.Drawing.Imaging.BitmapData)">
            <summary>
            Create unmanaged image from the specified managed image.
            </summary>
            <param name="imageData">Source locked image data.</param>
            <returns>Returns new unmanaged image, which is a copy of source managed image.</returns>
            <remarks><para>The method creates an exact copy of specified managed image, but allocated
            in unmanaged memory. This means that managed image may be unlocked right after call to this
            method.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.FromManagedImage(System.Drawing.Bitmap)">
            <summary>
            Create unmanaged image from the specified managed image.
            </summary>
            <param name="image">Source managed image.</param>
            <returns>Returns new unmanaged image, which is a copy of source managed image.</returns>
            <remarks><para>The method creates an exact copy of specified managed image, but allocated
            in unmanaged memory.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.Rgb2Gray(System.Byte,System.Byte,System.Byte)">
            <summary>
            Function to convert RGB color into grayscale
            </summary>
            <param name="r">red component (Range=0..255)</param>
            <param name="g">green component (Range=0..255)</param>
            <param name="b">Blue component (Range=0..255)</param>
            <returns>Grayscale value (Range=0..255)</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.Rgb2Gray(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Function to convert RGB color into grayscale
            </summary>
            <param name="r">red component (Range=0..65535)</param>
            <param name="g">green component (Range=0..65535)</param>
            <param name="b">Blue component (Range=0..65535)</param>
            <returns>Grayscale value (Range=0..65535)</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.SetGrayscalePalette(System.Drawing.Bitmap)">
            <summary>
            Set pallete of the 8 bpp indexed image to grayscale.
            </summary>
            <param name="image">Image to initialize.</param>
            <remarks>The method initializes palette of
            <see cref="T:System.Drawing.Imaging.PixelFormat">Format8bppIndexed</see>
            image with 256 gradients of gray color.</remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.Dispose">
            <summary>
            Dispose the object.
            </summary>
            <remarks><para>Frees unmanaged resources used by the object. The object becomes unusable
            after that.</para>
            <par><note>The method needs to be called only in the case if unmanaged image was allocated
            using <see cref="M:Microsoft.Psi.Imaging.Image.Create(System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)"/> method. In the case if the class instance was created using constructor,
            this method does not free unmanaged memory.</note></par>
            </remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CopyTo(Microsoft.Psi.Imaging.Image)">
            <summary>
            Copy unmanaged image.
            </summary>
            <param name="destImage">Destination image to copy this image to.</param>
            <remarks><para>The method copies current unmanaged image to the specified image.
            Size of the destination image must be exactly the same. Some differences in pixel
            formats are allowed and the method implements a translation of pixel formats</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CopyTo(System.Byte[])">
            <summary>
            Copies the psi image to a byte array buffer.
            </summary>
            <param name="destinationBuffer">The buffer to copy to.</param>
            <remarks><para>The method copies current unmanaged image to the specified buffer.
            The buffer must be allocated and must have the same size.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.SetPixel(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a pixel in the image
            </summary>
            <param name="x">Pixel's X coordinate</param>
            <param name="y">Pixel's Y coordinate</param>
            <param name="r">Red channel's value</param>
            <param name="g">Green channel's value</param>
            <param name="b">Blue channel's value</param>
            <param name="a">Alpha channel's value</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CopyTo(System.IntPtr,System.Int32,System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Copies the psi image to an unmanaged buffer.
            </summary>
            <param name="destination">The destination buffer</param>
            <param name="width">The destination image width</param>
            <param name="height">The destination image height</param>
            <param name="dstStride">The destination image stride</param>
            <param name="destinationFormat">The destination pixel format</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CopyFrom(System.Byte[])">
            <summary>
            Copies data from a byte array buffer into the psi image
            </summary>
            <param name="sourceBuffer">The buffer to copy from.</param>
            <remarks><para>The method copies data from the specified buffer into the unmanaged image
            The image must be allocated and must have the same size.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CopyFrom(System.IntPtr)">
            <summary>
            Copies data from an unmanaged buffer
            </summary>
            <param name="sourcePtr">A pointer to the unmanaged buffer to copy from.</param>
            <remarks><para>The method copies data from the specified buffer into the unmanaged image
            The image must be allocated and must have the same size.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CopyFrom(System.Drawing.Bitmap)">
            <summary>
            Copies data from an unmanaged buffer
            </summary>
            <param name="bitmap">A bitmap to copy from.</param>
            <remarks><para>The method copies data from the specified bitmap into the unmanaged image
            The image must be allocated and must have the same size.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.ToManagedImage">
            <summary>
            Create managed image from the unmanaged.
            </summary>
            <returns>Returns managed copy of the unmanaged image.</returns>
            <remarks><para>The method creates a managed copy of the unmanaged image with the
            same size and pixel format (it calls <see cref="M:Microsoft.Psi.Imaging.Image.ToManagedImage(System.Boolean)"/> specifying
            <see langword="true"/> for the <b>makeCopy</b> parameter).</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.ToManagedImage(System.Boolean)">
            <summary>
            Create managed image from the unmanaged.
            </summary>
            <param name="makeCopy">Make a copy of the unmanaged image or not.</param>
            <returns>Returns managed copy of the unmanaged image.</returns>
            <remarks><para>If the <paramref name="makeCopy"/> is set to <see langword="true"/>, then the method
            creates a managed copy of the unmanaged image, so the managed image stays valid even when the unmanaged
            image gets disposed. However, setting this parameter to <see langword="false"/> creates a managed image which is
            just a wrapper around the unmanaged image. So if unmanaged image is disposed, the
            managed image becomes no longer valid and accessing it will generate an exception.</para></remarks>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.ReadBytes(System.Int32,System.Int32)">
            <summary>
            Reads image data as a series of bytes
            </summary>
            <param name="count">Number of bytes to read</param>
            <param name="offset">Offset from start of image data</param>
            <returns>Array of bytes read</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.Crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a copy of the image cropped to the specified dimensions.
            </summary>
            <param name="left">The left of the region to crop.</param>
            <param name="top">The top of the region to crop.</param>
            <param name="width">The width of the region to crop.</param>
            <param name="height">The height of the region to crop.</param>
            <returns>The cropped image.</returns>
        </member>
        <member name="T:Microsoft.Psi.Imaging.Image.CustomSerializer">
            <summary>
            Custom serializer used for reading/writing images
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Imaging.Image.CustomSerializer.CompressionMethod">
            <summary>
            Defines type of compression to use when serializing out an Image
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Image.CustomSerializer.CompressionMethod.JPEG">
            <summary>
            Use JPEG compression
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Image.CustomSerializer.CompressionMethod.PNG">
            <summary>
            Use PNG compression
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Image.CustomSerializer.CompressionMethod.None">
            <summary>
            Use no compression
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CustomSerializer.ConfigureCompression(Microsoft.Psi.Imaging.Image.CustomSerializer.CompressionMethod)">
            <summary>
            Maybe called to initialize type of compression to use. Default is no compression
            </summary>
            <param name="method">Type of compression to use</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CustomSerializer.Initialize(Microsoft.Psi.Serialization.KnownSerializers,Microsoft.Psi.Serialization.TypeSchema)">
            <summary>
            Initialize custom serializer.
            </summary>
            <param name="serializers">Known serializers</param>
            <param name="targetSchema">Target type schema</param>
            <returns>Type schema</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CustomSerializer.Serialize(Microsoft.Psi.Common.BufferWriter,Microsoft.Psi.Imaging.Image,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Serialize image.
            </summary>
            <param name="writer">Writer to which to serialize</param>
            <param name="instance">Image instace to serialize</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CustomSerializer.PrepareCloningTarget(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Prepare target for cloning.
            </summary>
            <remarks>Called before Clone, to ensure the target is valid</remarks>
            <param name="instance">Image instance from which to clone</param>
            <param name="target">Image into which to clone</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CustomSerializer.Clone(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Clone image.
            </summary>
            <param name="instance">Image instance to clone</param>
            <param name="target">Target image into which to clone</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CustomSerializer.PrepareDeserializationTarget(Microsoft.Psi.Common.BufferReader,Microsoft.Psi.Imaging.Image@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Prepare target for deserialization.
            </summary>
            <remarks>Called before Deserialize, to ensure the target is valid</remarks>
            <param name="reader">Reader being used.</param>
            <param name="target">Target image into which to deserialize</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CustomSerializer.Deserialize(Microsoft.Psi.Common.BufferReader,Microsoft.Psi.Imaging.Image@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Deserialize image.
            </summary>
            <param name="reader">Buffer reader being used</param>
            <param name="target">Target image into which to deserialize</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Image.CustomSerializer.Clear(Microsoft.Psi.Imaging.Image@,Microsoft.Psi.Serialization.SerializationContext)">
            <summary>
            Clear image to be reused.
            </summary>
            <remarks>Called once the object becomes unused and can be reused as a cloning target</remarks>
            <param name="target">Target image to clear</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="T:Microsoft.Psi.Imaging.ImagePool">
            <summary>
            Defines a pool of images
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImagePool.GetOrCreate(System.Int32,System.Int32,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Retrieves an image from the pool
            </summary>
            <param name="width">Width of image requested</param>
            <param name="height">Height of image requested</param>
            <param name="pixelFormat">Pixel format for requested image</param>
            <returns>Returns an image from the pool</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImagePool.GetOrCreate(System.Drawing.Bitmap)">
            <summary>
            Creates a shared image from a managed Bitmap object by retrieving an existing
            image from the pool or allocating a new image.
            </summary>
            <param name="image">Bitmap from which to copy the image data</param>
            <returns>Returns an shared image from the pool containing a copy of the image data from "imageData"</returns>
        </member>
        <member name="T:Microsoft.Psi.Imaging.TransformDelegate">
            <summary>
            Defines the delegate used to perform an image transformation
            </summary>
            <param name="src">Source image to be transformed</param>
            <param name="dest">Destination for transformed image</param>
        </member>
        <member name="T:Microsoft.Psi.Imaging.ImageTransformer">
            <summary>
            Component that transforms an image given a specified transformer.
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageTransformer.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Imaging.TransformDelegate,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.ImageTransformer"/> class.
            </summary>
            <param name="pipeline">Pipeline this component is a part of</param>
            <param name="transformer">Function for transforming the source image</param>
            <param name="pixelFormat">Pixel format for destination image</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ImageTransformer.Receive(Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image},Microsoft.Psi.Envelope)">
            <summary>
            Pipeline callback for processing this component
            </summary>
            <param name="sharedImage">Image to transform</param>
            <param name="e">Pipeline sample information</param>
        </member>
        <member name="T:Microsoft.Psi.Imaging.SamplingMode">
            <summary>
            Sampling mode used by various imaging operators
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.SamplingMode.Point">
            <summary>
            Sampling mode using nearest neighbor interpolation
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.SamplingMode.Bilinear">
            <summary>
            Sampling mode using bilinear interpolation
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.SamplingMode.Bicubic">
            <summary>
            Sampling mode using bicubic interpolation
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Imaging.Threshold">
            <summary>
            Thresholding modes
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Threshold.Binary">
            <summary>
            Thresholds pixels such that:
               dst(x,y) = maxvalue   if (src(x,y)>threshold)
                        = 0          otherwise
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Threshold.BinaryInv">
            <summary>
            Thresholds pixels such that:
               dst(x,y) = 0          if (src(x,y)>threshold)
                        = maxvalue   otherwise
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Threshold.Truncate">
            <summary>
            Thresholds pixels such that:
               dst(x,y) = threshold   if (src(x,y)>threshold)
                        = src(x,y)    otherwise
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Threshold.ToZero">
            <summary>
            Thresholds pixels such that:
               dst(x,y) = src(x,y)   if (src(x,y)>threshold)
                        = 0          otherwise
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.Threshold.ToZeroInv">
            <summary>
            Thresholds pixels such that:
               dst(x,y) = 0          if (src(x,y)>threshold)
                        = src(x,y)   otherwise
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Imaging.FlipMode">
            <summary>
            Axis along which to flip an image
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.FlipMode.None">
            <summary>
            Leave image unflipped
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.FlipMode.AlongHorizontalAxis">
            <summary>
            Flips image along the horizontal axis
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.FlipMode.AlongVerticalAxis">
            <summary>
            Flips image along the vertical axis
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Imaging.Operators">
            <summary>
            Various imaging operators
            </summary>
            <summary>
            Set of operators used for drawing on an image
            </summary>
            <summary>
            Set of transforms for copying image data
            </summary>
            <summary>
            Basic color transforms on images
            </summary>
            <summary>
            Imaging math operators
            </summary>
            <summary>
            Implements stream operator methods for Imaging
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Flip(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.FlipMode)">
            <summary>
            Flips an image along a specified axis
            </summary>
            <param name="image">Image to flip</param>
            <param name="mode">Axis along which to flip</param>
            <returns>A new flipped image</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Scale(Microsoft.Psi.Imaging.Image,System.Single,System.Single,Microsoft.Psi.Imaging.SamplingMode)">
            <summary>
            Resizes an image by the specified scale factors using the specified sampling mode
            </summary>
            <param name="image">Image to resize</param>
            <param name="xScale">Scale factor to apply in X direction</param>
            <param name="yScale">Scale factor to apply in Y direction</param>
            <param name="mode">Sampling mode for sampling of pixels</param>
            <returns>Returns a new image scaled by the specified scale factors</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Rotate(Microsoft.Psi.Imaging.Image,System.Single,Microsoft.Psi.Imaging.SamplingMode)">
            <summary>
            Rotates an image
            </summary>
            <param name="image">Image to rotate</param>
            <param name="angleInDegrees">Number of degrees to rotate in counter clockwise direction</param>
            <param name="mode">Pixel resampling method</param>
            <returns>Rotated image</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DrawRectangle(Microsoft.Psi.Imaging.Image,System.Drawing.Rectangle,System.Drawing.Color,System.Int32)">
            <summary>
            Draws a rectangle at the specified pixel coordinates on the image
            </summary>
            <param name="image">Image to draw on</param>
            <param name="rect">Pixel coordinates for rectangle</param>
            <param name="color">Color to use for drawing</param>
            <param name="width">Width of line</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DrawLine(Microsoft.Psi.Imaging.Image,System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Int32)">
            <summary>
            Draws a line from point p0 to p1 in pixel coordinates on the image
            </summary>
            <param name="image">Image to draw on</param>
            <param name="p0">Pixel coordinates for start of line</param>
            <param name="p1">Pixel coordinates for end of line</param>
            <param name="color">Color to use for drawing</param>
            <param name="width">Width of line</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DrawCircle(Microsoft.Psi.Imaging.Image,System.Drawing.Point,System.Int32,System.Drawing.Color,System.Int32)">
            <summary>
            Draws a circle centered at the specified pixel (p0) with the specified radius
            </summary>
            <param name="image">Image to draw on</param>
            <param name="p0">Pixel coordinates for center of circle</param>
            <param name="radius">Radius of the circle</param>
            <param name="color">Color to use for drawing</param>
            <param name="width">Width of line</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.DrawText(Microsoft.Psi.Imaging.Image,System.String,System.Drawing.Point)">
            <summary>
            Renders text on the image at the specified pixel (p0)
            </summary>
            <param name="image">Image to draw on</param>
            <param name="str">Text to render</param>
            <param name="p0">Pixel coordinates for center of circle</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.CopyTo(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image)">
            <summary>
            Copies a source image into a destination image using the specified masking image.
            Only pixels in the source image whose corresponding mask image pixels are > 0
            are copied to the destination image.
            </summary>
            <param name="srcImage">Source image</param>
            <param name="dstImage">Destination image</param>
            <param name="maskImage">Masking image</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.CopyTo(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image,System.Drawing.Rectangle)">
            <summary>
            Copies a source image into a destination image using the specified masking image.
            Only pixels in the source image whose corresponding mask image pixels are > 0
            are copied to the destination image. Only pixels from the srcRect are copied
            to the destination rect.
            </summary>
            <param name="srcImage">Source image</param>
            <param name="dstImage">Destination image</param>
            <param name="rect">Rectangle to copy</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.CopyTo(Microsoft.Psi.Imaging.Image,System.Drawing.Rectangle,Microsoft.Psi.Imaging.Image,System.Drawing.Rectangle)">
            <summary>
            Copies a source image into a destination image using the specified masking image.
            Only pixels in the source image whose corresponding mask image pixels are > 0
            are copied to the destination image. Only pixels from the srcRect are copied
            to the destination rect.
            </summary>
            <param name="srcImage">Source image</param>
            <param name="srcRect">Source rectangle to copy from</param>
            <param name="dstImage">Destination image</param>
            <param name="dstRect">Destunatuin rectangle to copy to</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.CopyTo(Microsoft.Psi.Imaging.Image,System.Drawing.Rectangle,Microsoft.Psi.Imaging.Image,System.Drawing.Rectangle,Microsoft.Psi.Imaging.Image)">
            <summary>
            Copies a source image into a destination image using the specified masking image.
            Only pixels in the source image whose corresponding mask image pixels are > 0
            are copied to the destination image. Only pixels from the srcRect are copied
            to the destination rect.
            </summary>
            <param name="srcImage">Source image</param>
            <param name="srcRect">Source rectangle to copy from</param>
            <param name="dstImage">Destination image</param>
            <param name="dstRect">Destination rectangle to copy to</param>
            <param name="maskImage">Masking image</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Invert(Microsoft.Psi.Imaging.Image)">
            <summary>
            Inverts an image.
            </summary>
            <param name="image">Image to invert</param>
            <returns>Returns the inverted image</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Clear(Microsoft.Psi.Imaging.Image,System.Drawing.Color)">
            <summary>
            Clears an image.
            </summary>
            <param name="image">Image to clear</param>
            <param name="clr">Color to clear to</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.ExtractChannel(Microsoft.Psi.Imaging.Image,System.Int32)">
            <summary>
            Extracts a single channel from the image and returns it as a gray scale image.
            </summary>
            <param name="image">Image to extract from</param>
            <param name="channel">Index of channel to extract from</param>
            <returns>Returns a new grayscale image containing the color from the specified channel in the original source image</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Threshold(Microsoft.Psi.Imaging.Image,System.Int32,System.Int32,Microsoft.Psi.Imaging.Threshold)">
            <summary>
            Performs per channel thresholding on the image
            </summary>
            <param name="image">Image to be thresholded</param>
            <param name="threshold">Threshold value</param>
            <param name="maxvalue">Maximum value</param>
            <param name="type">Type of thresholding to perform</param>
            <returns>The thresholded image</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.AbsDiff(Microsoft.Psi.Imaging.Image,Microsoft.Psi.Imaging.Image)">
            <summary>
            Flips an image along a specified axis
            </summary>
            <param name="imageA">First image</param>
            <param name="imageB">Second image</param>
            <returns>Difference image</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Convert(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Converts the source image to a different pixel format
            </summary>
            <param name="source">The source stream.</param>
            <param name="pixelFormat">The pixel format to convert to</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>The resulting stream.</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Transform(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},Microsoft.Psi.Imaging.TransformDelegate,Microsoft.Psi.Imaging.PixelFormat,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Converts an image to a different pixel format using the specified transformer
            </summary>
            <param name="source">Source image to compress</param>
            <param name="transformer">Method for converting an image sample</param>
            <param name="pixelFormat">Pixel format to use for converted image</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Returns a producer that generates the transformed images</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Crop(Microsoft.Psi.IProducer{System.ValueTuple{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image},System.Drawing.Rectangle}},Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Crops an image using the specified rectangle.
            </summary>
            <param name="source">Source of image and rectangle samples</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Returns a producer generating new cropped image samples</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.ToGray(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Converts an image to grayscale
            </summary>
            <param name="source">Image producer to use as source images</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Producers of grayscale images</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Resize(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Single,System.Single,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Resizes an image
            </summary>
            <param name="source">Image to scale</param>
            <param name="finalWidth">Final width of desired output</param>
            <param name="finalHeight">Final height of desired output</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Returns a producer that generates resized images</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Flip(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},Microsoft.Psi.Imaging.FlipMode,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Flips an image about the horizontal or vertical axis
            </summary>
            <param name="source">Image to flip</param>
            <param name="mode">Axis about which to flip</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>A producer that generates flip images</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.AbsDiff(Microsoft.Psi.IProducer{System.ValueTuple{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image},Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}}},Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Computes the absolute difference between two images
            </summary>
            <param name="sources">Images to diff</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Producer that returns the difference image</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.Operators.Threshold(Microsoft.Psi.IProducer{Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image}},System.Int32,System.Int32,Microsoft.Psi.Imaging.Threshold,Microsoft.Psi.DeliveryPolicy)">
            <summary>
            Thresholds the image. See Threshold for what modes of thresholding are available.
            </summary>
            <param name="image">Images to threshold</param>
            <param name="threshold">Threshold value</param>
            <param name="maxvalue">Maximum value</param>
            <param name="thresholdType">Type of thresholding to perform</param>
            <param name="deliveryPolicy">An optional delivery policy.</param>
            <returns>Producer that returns the difference image</returns>
        </member>
        <member name="T:Microsoft.Psi.Imaging.PixelFormat">
            <summary>
            PixelFormat defines
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.Undefined">
            <summary>
            Used when the pixel format isn't defined
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.Gray_8bpp">
            <summary>
            Defines an grayscale image where each pixel is 8 bits
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.Gray_16bpp">
            <summary>
            Defines an grayscale image where each pixel is 16 bits
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.BGR_24bpp">
            <summary>
            Defines an color image format where each red/green/blue component is 8 bits.
            The byte order in memory is: bb gg rr
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.BGRX_32bpp">
            <summary>
            Defines an color image format where each red/green/blue component is 8 bits.
            The byte order in memory is: bb gg rr xx
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.BGRA_32bpp">
            <summary>
            Defines an color image format where each red/green/blue/alpha component is 8 bits.
            The byte order in memory is: bb gg rr aa
            </summary>
        </member>
        <member name="F:Microsoft.Psi.Imaging.PixelFormat.RGBA_64bpp">
            <summary>
            Defines an color image format where each red/green/blue/alpha component is 16 bits.
            The byte order in memory is: rrrr gggg bbbb aaaa
            </summary>
        </member>
        <member name="T:Microsoft.Psi.Imaging.PixelFormatExtensions">
            <summary>
            Defines a set of extensions for getting info about a PixelFormat
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatExtensions.GetBitsPerPixel(Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Returns the number of bits per pixel for a given pixel format
            </summary>
            <param name="pixelFormat">Pixel format for which to find bits per pixel</param>
            <returns>Number of bits per pixel for the given pixel format</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatExtensions.GetBytesPerPixel(Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Returns the number of bytes per pixel for a given pixel format
            </summary>
            <param name="pixelFormat">Pixel format for which to find bytes per pixel</param>
            <returns>Number of bytes per pixel for the given pixel format</returns>
        </member>
        <member name="T:Microsoft.Psi.Imaging.PixelFormatHelper">
            <summary>
            Set of static functions for manipulating pixel formats
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatHelper.FromSystemPixelFormat(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts from a system pixel format into a Psi.Imaging pixel format
            </summary>
            <param name="pf">System pixel format to be converted</param>
            <returns>Psi.Imaging pixel format that matches the specified system pixel format</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatHelper.ToSystemPixelFormat(Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Converts from a Psi.Imaging PixelFormat to a System.Drawing.Imaging.PixelFormat
            </summary>
            <param name="pf">Pixel format to convert</param>
            <returns>The system pixel format that corresponds to the Psi.Imaging pixel format</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatHelper.GetBitsPerPixel(Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Returns number of bits/pixel for the specified pixel format
            </summary>
            <param name="pixelFormat">Pixel format for which to detemine number of bits/pxiel</param>
            <returns>Number of bits per pixel in specified format</returns>
        </member>
        <member name="M:Microsoft.Psi.Imaging.PixelFormatHelper.GetBytesPerPixel(Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Returns number of bytes/pixel for the specified pixel format
            </summary>
            <param name="pixelFormat">Pixel format for which to determine number of bytes</param>
            <returns>Number of bytes in each pixel of the specified format</returns>
        </member>
        <member name="T:Microsoft.Psi.Imaging.ToPixelFormat">
            <summary>
            Pipeline component that converts an Image to a different format
            </summary>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ToPixelFormat.#ctor(Microsoft.Psi.Pipeline,Microsoft.Psi.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Psi.Imaging.ToPixelFormat"/> class.
            </summary>
            <param name="pipeline">The pipline</param>
            <param name="pixelFormat">The pixel format to conver to</param>
        </member>
        <member name="M:Microsoft.Psi.Imaging.ToPixelFormat.Receive(Microsoft.Psi.Shared{Microsoft.Psi.Imaging.Image},Microsoft.Psi.Envelope)">
            <summary>
            Receiver for incoming image
            </summary>
            <param name="sharedImage">The incoming image</param>
            <param name="e">The message envelope for the incoming image.</param>
        </member>
    </members>
</doc>
